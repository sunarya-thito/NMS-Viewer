package net.minecraft.server;

import com.google.common.collect.ImmutableList;
import com.mojang.datafixers.util.Pair;

public class WorldGenFeatureBastionTreasure {

    public static void a() {}

    static {
        ImmutableList<DefinedStructureProcessor> immutablelist = ImmutableList.of(new DefinedStructureProcessorRule(ImmutableList.of(new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3F), DefinedStructureTestTrue.b, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.getBlockData()), new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.15F), DefinedStructureTestTrue.b, Blocks.AIR.getBlockData()), new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3F), DefinedStructureTestTrue.b, Blocks.BLACKSTONE.getBlockData()))));
        ImmutableList<DefinedStructureProcessor> immutablelist1 = ImmutableList.of(new DefinedStructureProcessorRule(ImmutableList.of(new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.35F), DefinedStructureTestTrue.b, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.getBlockData()), new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.CHISELED_POLISHED_BLACKSTONE, 0.1F), DefinedStructureTestTrue.b, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.getBlockData()), WorldGenFeatureBastionExtra.a)));
        ImmutableList<DefinedStructureProcessor> immutablelist2 = ImmutableList.of(new DefinedStructureProcessorRule(ImmutableList.of(new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.01F), DefinedStructureTestTrue.b, Blocks.AIR.getBlockData()), new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.5F), DefinedStructureTestTrue.b, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.getBlockData()), new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.POLISHED_BLACKSTONE_BRICKS, 0.3F), DefinedStructureTestTrue.b, Blocks.BLACKSTONE.getBlockData()))));
        ImmutableList<DefinedStructureProcessor> immutablelist3 = ImmutableList.of(new DefinedStructureProcessorRule(ImmutableList.of(new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.GOLD_BLOCK, 0.3F), DefinedStructureTestTrue.b, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.getBlockData()), new DefinedStructureProcessorPredicates(DefinedStructureTestTrue.b, DefinedStructureTestTrue.b, new PosRuleTestAxisAlignedLinear(0.0F, 0.05F, 0, 100, EnumDirection.EnumAxis.Y), Blocks.AIR.getBlockData()))));
        ImmutableList<DefinedStructureProcessor> immutablelist4 = ImmutableList.of(new DefinedStructureProcessorRule(ImmutableList.of(new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.MAGMA_BLOCK, 0.75F), DefinedStructureTestTrue.b, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS.getBlockData()), new DefinedStructureProcessorPredicates(new DefinedStructureTestRandomBlock(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS, 0.15F), DefinedStructureTestTrue.b, Blocks.POLISHED_BLACKSTONE_BRICKS.getBlockData()), WorldGenFeatureBastionExtra.a)));

        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/starters"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/big_air_full", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/bases"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/bases/lava_basin", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/stairs"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/stairs/lower_stairs", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/bases/centers"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/bases/centers/center_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/bases/centers/center_1", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/bases/centers/center_2", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/bases/centers/center_3", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/brains"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/brains/center_brain", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/lava_wall", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/entrance_wall", immutablelist2), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/outer"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/outer/top_corner", immutablelist2), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/outer/mid_corner", immutablelist2), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/outer/bottom_corner", immutablelist2), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/outer/outer_wall", immutablelist2), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/outer/medium_outer_wall", immutablelist2), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/outer/tall_outer_wall", immutablelist2), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/bottom"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/bottom/wall_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/bottom/wall_1", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/bottom/wall_2", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/bottom/wall_3", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/mid"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/mid/wall_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/mid/wall_1", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/mid/wall_2", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/top"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/top/main_entrance", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/top/wall_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/walls/top/wall_1", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/connectors"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/connectors/center_to_wall_middle", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/connectors/center_to_wall_top", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/connectors/center_to_wall_top_entrance", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/entrances"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/entrances/entrance_0", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/ramparts"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/ramparts/mid_wall_main", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/ramparts/mid_wall_side", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/ramparts/bottom_wall_0", immutablelist4), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/ramparts/top_wall", immutablelist3), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/ramparts/lava_basin_side", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/ramparts/lava_basin_main", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/bottom"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/bottom/corner_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/bottom/corner_1", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/edges"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/edges/bottom", immutablelist2), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/edges/middle", immutablelist2), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/edges/top", immutablelist2), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/middle"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/middle/corner_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/middle/corner_1", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/top"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/top/corner_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/corners/top/corner_1", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/extensions/large_pool"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/empty", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/empty", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/fire_room", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/large_bridge_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/large_bridge_1", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/large_bridge_2", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/large_bridge_3", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/roofed_bridge", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/empty", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/extensions/small_pool"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/empty", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/fire_room", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/empty", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/small_bridge_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/small_bridge_1", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/small_bridge_2", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/small_bridge_3", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/extensions/houses"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/house_0", immutablelist1), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/extensions/house_1", immutablelist1), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeatureDefinedStructureJigsawPlacement.a.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/roofs"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/roofs/wall_roof", immutablelist), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/roofs/corner_roof", immutablelist), 1), Pair.of(new WorldGenFeatureDefinedStructurePoolSingle("bastion/treasure/roofs/center_roof", immutablelist), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
    }
}
