package net.minecraft.server;

import com.google.common.collect.ImmutableList;
import com.mojang.datafixers.util.Pair;

public class WorldGenFeatureBastionTreasure {

    public static void a() {}

    static {
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/bases"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/bases/lava_basin", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/stairs"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/stairs/lower_stairs", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/bases/centers"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/bases/centers/center_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/bases/centers/center_1", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/bases/centers/center_2", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/bases/centers/center_3", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/brains"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/brains/center_brain", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/lava_wall", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/entrance_wall", ProcessorLists.C), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/outer"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/outer/top_corner", ProcessorLists.C), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/outer/mid_corner", ProcessorLists.C), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/outer/bottom_corner", ProcessorLists.C), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/outer/outer_wall", ProcessorLists.C), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/outer/medium_outer_wall", ProcessorLists.C), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/outer/tall_outer_wall", ProcessorLists.C), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/bottom"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/bottom/wall_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/bottom/wall_1", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/bottom/wall_2", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/bottom/wall_3", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/mid"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/mid/wall_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/mid/wall_1", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/mid/wall_2", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/walls/top"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/top/main_entrance", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/top/wall_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/walls/top/wall_1", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/connectors"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/connectors/center_to_wall_middle", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/connectors/center_to_wall_top", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/connectors/center_to_wall_top_entrance", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/entrances"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/entrances/entrance_0", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/ramparts"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/ramparts/mid_wall_main", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/ramparts/mid_wall_side", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/ramparts/bottom_wall_0", ProcessorLists.s), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/ramparts/top_wall", ProcessorLists.D), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/ramparts/lava_basin_side", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/ramparts/lava_basin_main", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/bottom"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/bottom/corner_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/bottom/corner_1", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/edges"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/edges/bottom", ProcessorLists.C), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/edges/middle", ProcessorLists.C), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/edges/top", ProcessorLists.C), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/middle"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/middle/corner_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/middle/corner_1", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/corners/top"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/top/corner_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/corners/top/corner_1", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/extensions/large_pool"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/empty", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/empty", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/fire_room", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/large_bridge_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/large_bridge_1", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/large_bridge_2", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/large_bridge_3", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/roofed_bridge", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/empty", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/extensions/small_pool"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/empty", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/fire_room", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/empty", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/small_bridge_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/small_bridge_1", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/small_bridge_2", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/small_bridge_3", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/extensions/houses"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/house_0", ProcessorLists.t), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/extensions/house_1", ProcessorLists.t), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.a(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/treasure/roofs"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/roofs/wall_roof", ProcessorLists.B), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/roofs/corner_roof", ProcessorLists.B), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.b("bastion/treasure/roofs/center_roof", ProcessorLists.B), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
    }
}
