package net.minecraft.data.worldgen;

import com.google.common.collect.ImmutableList;
import com.mojang.datafixers.util.Pair;
import net.minecraft.resources.MinecraftKey;
import net.minecraft.world.level.levelgen.feature.structures.WorldGenFeatureDefinedStructurePoolStructure;
import net.minecraft.world.level.levelgen.feature.structures.WorldGenFeatureDefinedStructurePoolTemplate;

public class WorldGenFeatureBastionUnits {

    public WorldGenFeatureBastionUnits() {}

    public static void bootstrap() {}

    static {
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/center_pieces"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/center_pieces/center_0", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/center_pieces/center_1", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/center_pieces/center_2", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/pathways"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/pathways/pathway_0", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/pathways/pathway_wall_0", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/walls/wall_bases"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/walls/wall_base", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/walls/connected_wall", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/stages/stage_0"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_0_0", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_0_1", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_0_2", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_0_3", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/stages/stage_1"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_1_0", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_1_1", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_1_2", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_1_3", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/stages/rot/stage_1"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/rot/stage_1_0", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/stages/stage_2"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_2_0", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_2_1", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/stages/stage_3"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_3_0", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_3_1", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_3_2", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/stages/stage_3_3", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/fillers/stage_0"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/fillers/stage_0", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/edges"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/edges/edge_0", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/wall_units"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/wall_units/unit_0", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/edge_wall_units"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/wall_units/edge_0_large", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/ramparts"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/ramparts/ramparts_1", ProcessorLists.HOUSING), 1), Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/ramparts/ramparts_2", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/large_ramparts"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/ramparts/ramparts_0", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
        WorldGenFeaturePieces.register(new WorldGenFeatureDefinedStructurePoolTemplate(new MinecraftKey("bastion/units/rampart_plates"), new MinecraftKey("empty"), ImmutableList.of(Pair.of(WorldGenFeatureDefinedStructurePoolStructure.single("bastion/units/rampart_plates/plate_0", ProcessorLists.HOUSING), 1)), WorldGenFeatureDefinedStructurePoolTemplate.Matching.RIGID));
    }
}
