package net.minecraft.network.protocol.game;

import net.minecraft.network.PacketDataSerializer;
import net.minecraft.network.protocol.Packet;
import net.minecraft.world.EnumHand;

public class PacketPlayOutOpenBook implements Packet<PacketListenerPlayOut> {

    private final EnumHand hand;

    public PacketPlayOutOpenBook(EnumHand enumhand) {
        this.hand = enumhand;
    }

    public PacketPlayOutOpenBook(PacketDataSerializer packetdataserializer) {
        this.hand = (EnumHand) packetdataserializer.a(EnumHand.class);
    }

    @Override
    public void a(PacketDataSerializer packetdataserializer) {
        packetdataserializer.a((Enum) this.hand);
    }

    public void a(PacketListenerPlayOut packetlistenerplayout) {
        packetlistenerplayout.a(this);
    }

    public EnumHand b() {
        return this.hand;
    }
}
